// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(ulid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  email         String   @unique
  passwordHash  String
  emailVerified Boolean  @default(false)
  
  verificationCodes VerificationCode[]
  uploads           Upload[]
  posts             Post[]
  comments          Comment[]
  reactions         Reaction[]
}

model VerificationCode {
  id        String   @id @default(ulid())
  createdAt DateTime @default(now())
  code      String   @unique
  type      String   // "email_verification" | "password_reset"
  expiresAt DateTime
  userId    String
  email     String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Upload {
  id               String   @id @default(ulid())
  createdAt        DateTime @default(now())
  key              String   @unique
  originalFileName String
  mimeType         String
  fileSize         Int
  publicUrl        String
  userId           String
  
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts Post[]
}

model Post {
  id       String   @id @default(ulid())
  createdAt DateTime @default(now())
  content  String
  uploadId String?
  userId   String
  
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  upload    Upload?    @relation(fields: [uploadId], references: [id], onDelete: SetNull)
  comments  Comment[]  @relation("PostComments")
  reactions Reaction[] @relation("PostReactions")
}

model Comment {
  id        String   @id @default(ulid())
  createdAt DateTime @default(now())
  content   String
  postId    String?
  commentId String?
  userId    String
  
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post?      @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  parentComment Comment?   @relation("CommentReplies", fields: [commentId], references: [id], onDelete: SetNull)
  replies       Comment[]  @relation("CommentReplies")
  reactions     Reaction[] @relation("CommentReactions")
}

model Reaction {
  id        String   @id @default(ulid())
  createdAt DateTime @default(now())
  type      String   // "like" | "love" | "laugh" | "angry" | "sad"
  postId    String?
  commentId String?
  userId    String
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation("PostReactions", fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation("CommentReactions", fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@unique([userId, commentId])
}
